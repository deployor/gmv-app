// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define models based on existing Supabase schema

model Profile {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  updatedAt DateTime? @map("updated_at") @db.Timestamptz
  username  String?   @unique
  fullName  String?   @map("full_name")
  avatarUrl String?   @map("avatar_url")
  email     String?
  role      Role      @default(student)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  teacherClasses       Class[]                     @relation("TeacherClasses")
  studentEnrollments   Enrollment[]                @relation("StudentEnrollments")
  authorAnnouncements  Announcement[]              @relation("AuthorAnnouncements")
  studentSubmissions   Submission[]                @relation("StudentSubmissions")
  asParent             ParentStudentRelationship[] @relation("ParentRelationship")
  asStudent            ParentStudentRelationship[] @relation("StudentRelationship")
  parentNotifications  ParentNotification[]        @relation("ParentNotifications")
  studentNotifications ParentNotification[]        @relation("StudentNotifications")

  @@map("profiles")
}

enum Role {
  student
  teacher
  admin
  parent
}

model Class {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  name        String
  description String?
  teacherId   String?  @map("teacher_id") @db.Uuid
  imageUrl    String?  @map("image_url")

  // Relations
  teacher       Profile?       @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)
  enrollments   Enrollment[]
  assignments   Assignment[]
  announcements Announcement[]

  @@map("classes")
}

model Enrollment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  studentId String   @map("student_id") @db.Uuid
  classId   String   @map("class_id") @db.Uuid

  // Relations
  student Profile @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId])
  @@map("enrollments")
}

model Assignment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  title       String
  description String?
  dueDate     DateTime @map("due_date") @db.Timestamptz
  classId     String   @map("class_id") @db.Uuid
  points      Int      @default(100)

  // Relations
  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@map("assignments")
}

model Submission {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  studentId    String   @map("student_id") @db.Uuid
  assignmentId String   @map("assignment_id") @db.Uuid
  content      String?
  fileUrl      String?  @map("file_url")
  grade        Int?
  feedback     String?
  isGraded     Boolean  @default(false) @map("is_graded")

  // Relations
  student    Profile    @relation("StudentSubmissions", fields: [studentId], references: [id], onDelete: Cascade)
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([studentId, assignmentId])
  @@map("submissions")
}

model Announcement {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  title     String
  content   String
  authorId  String   @map("author_id") @db.Uuid
  classId   String?  @map("class_id") @db.Uuid

  // Relations
  author Profile @relation("AuthorAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)
  class  Class?  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model ParentStudentRelationship {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parentId         String   @map("parent_id") @db.Uuid
  studentId        String   @map("student_id") @db.Uuid
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz
  relationshipType String?  @map("relationship_type")

  // Relations
  parent        Profile              @relation("ParentRelationship", fields: [parentId], references: [id], onDelete: Cascade)
  student       Profile              @relation("StudentRelationship", fields: [studentId], references: [id], onDelete: Cascade)
  notifications ParentNotification[]

  @@unique([parentId, studentId])
  @@map("parent_student_relationships")
}

model ParentNotification {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamptz
  parentId    String           @map("parent_id") @db.Uuid
  studentId   String           @map("student_id") @db.Uuid
  type        NotificationType
  content     String
  isRead      Boolean          @default(false) @map("is_read")
  referenceId String?          @map("reference_id") @db.Uuid

  // Relations
  parent       Profile                   @relation("ParentNotifications", fields: [parentId], references: [id], onDelete: Cascade)
  student      Profile                   @relation("StudentNotifications", fields: [studentId], references: [id], onDelete: Cascade)
  relationship ParentStudentRelationship @relation(fields: [parentId, studentId], references: [parentId, studentId], onDelete: Cascade)

  @@map("parent_notifications")
}

enum NotificationType {
  grade
  attendance
  behavior
  announcement
}
